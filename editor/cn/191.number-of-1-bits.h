//编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。 
//
// 
//
// 示例 1： 
//
// 输入：00000000000000000000000000001011
//输出：3
//解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
// 
//
// 示例 2： 
//
// 输入：00000000000000000000000010000000
//输出：1
//解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
// 
//
// 示例 3： 
//
// 输入：11111111111111111111111111111101
//输出：31
//解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。 
//
// 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。 
// 
//
// 
//
// 进阶: 
//如果多次调用这个函数，你将如何优化你的算法？ 
// Related Topics 位运算

#include "header.h"

namespace LeetCode191 {

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:
    int hammingWeight(uint32_t n) {
      return solution3(n);
    }

    int solution1(uint32_t n) {
      int res = 0;
      while (n >= 1) {
        res += n & 1;
        n = n >> 1;
      }
      return res;
    }

    // 只消去最后的1
    int solution2(uint32_t n) {
      int ans = 0;
      while (n != 0) {
        n = n & (n-1);  // 消去最低位的1
        // n -= n & (~n + 1);  // 同理也是消去最低位的1, n & (~n + 1) 可以取到最低位 1 的大小
        ++ans;
      }
      return ans;
    }

    // 效率较为平均
    int solution3(uint32_t n) {
      n = (n & 0x55555555) + ((n >> 1) & 0x55555555);
      n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
      n = (n & 0x0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f);
      n = (n & 0x00ff00ff) + ((n >> 8) & 0x00ff00ff);
      n = (n & 0x0000ffff) + ((n >> 16) & 0x0000ffff);
      return n;
    }
};
//leetcode submit region end(Prohibit modification and deletion)

}